{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SanketNayak\\\\Documents\\\\New1\\\\mernstack\\\\frontend\\\\src\\\\components\\\\ProductEdit.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { ValidationError } from \"./ValidationError\";\nimport { useParams } from \"react-router-dom\";\nimport httpClient from \"../apiClient/httpClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProductEdit = ({\n  onSave\n}) => {\n  _s();\n  // Fetching the product details by id.\n  const [product, setProduct] = useState({});\n  const {\n    id\n  } = useParams();\n  // console.log(id);\n\n  const getProductById = useCallback(async () => {\n    const response = await httpClient.getById('http://localhost:9999/api/products', Number(id));\n    setProduct(response);\n  }, []);\n  useEffect(() => {\n    getProductById();\n  }, []);\n  // formState --> handling validations.\n  // register --> It is an object + binds the value of the form objects and display it to the user.\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    formState: {\n      errors,\n      isSubmitting,\n      isSubmitSuccessful\n    }\n  } = useForm();\n  // const { update } = useFieldArray({name : 'array'});\n\n  // Setting the values to the input tags.\n\n  /*\n    Dynamically setting the values to the input field.\n     setValue --> This function allows you to dynamically set the value \n    of a registered field and have the options to validate and update \n    the form state. At the same time, it tries to avoid unnecessary rerender.\n  */\n  setValue('productName', product.productName);\n  setValue('price', product.price);\n  setValue('starRating', product.starRating);\n  setValue('productId', product.productId);\n  setValue('productAvailable', product.productAvailable);\n  setValue('imageUrl', product.imageUrl);\n  setValue('productCode', product.productCode);\n  const fieldStyle = 'flex flex-col mb-2';\n  function getEditorStyle(fieldError) {\n    return fieldError ? 'border-red-500' : '';\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    noValidate: true,\n    className: \"border-b py-5\",\n    onSubmit: handleSubmit(onSave),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: fieldStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"productName\",\n        children: \"ProductName\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"productName\",\n        ...register('productName', {\n          required: 'You must enter a productName'\n        }),\n        className: getEditorStyle(errors.productName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidationError, {\n        fieldError: errors.productName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: fieldStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: \"ProductPrice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"price\",\n        ...register('price', {\n          required: 'You must enter a price'\n        }),\n        className: getEditorStyle(errors.price)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidationError, {\n        fieldError: errors.price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: fieldStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"starRating\",\n        children: \"Rating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"starRating\",\n        ...register('starRating', {\n          required: 'You must enter a rating'\n        }),\n        className: getEditorStyle(errors.starRating)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidationError, {\n        fieldError: errors.starRating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: fieldStyle,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        className: \"mt-2 h-10 px-6 font-semibold bg-black text-white\",\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(ProductEdit, \"6SL6mD+yEkpJmY6M5JvyLz6/lx4=\", false, function () {\n  return [useParams, useForm];\n});\n_c = ProductEdit;\nvar _c;\n$RefreshReg$(_c, \"ProductEdit\");","map":{"version":3,"names":["useCallback","useEffect","useState","useForm","ValidationError","useParams","httpClient","jsxDEV","_jsxDEV","ProductEdit","onSave","_s","product","setProduct","id","getProductById","response","getById","Number","register","setValue","handleSubmit","formState","errors","isSubmitting","isSubmitSuccessful","productName","price","starRating","productId","productAvailable","imageUrl","productCode","fieldStyle","getEditorStyle","fieldError","noValidate","className","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","required","type","disabled","_c","$RefreshReg$"],"sources":["C:/Users/SanketNayak/Documents/New1/mernstack/frontend/src/components/ProductEdit.tsx"],"sourcesContent":["import { FC, useCallback, useEffect, useState } from \"react\";\nimport {FieldError, useFieldArray, useForm} from \"react-hook-form\";\nimport { NewProductData, ProductData } from \"./types\";\nimport { ValidationError } from \"./ValidationError\";\nimport { useParams } from \"react-router-dom\";\nimport IProduct from \"../model/product\";\nimport httpClient from \"../apiClient/httpClient\";\n\ntype Props = {\n    onSave: (newProduct : NewProductData) => void\n}\n\nexport const ProductEdit : FC<any> = ({onSave}:Props) => {\n    // Fetching the product details by id.\n    const [product , setProduct] = useState<IProduct>({} as IProduct);\n    const {id} = useParams<string>();\n    // console.log(id);\n\n    const getProductById = useCallback(async() => {\n        const response = await httpClient.getById('http://localhost:9999/api/products',  Number(id))\n        setProduct(response)\n    },[])\n    useEffect(() => {\n        getProductById();\n    },[])\n    // formState --> handling validations.\n    // register --> It is an object + binds the value of the form objects and display it to the user.\n    const {register, setValue, handleSubmit,formState:{errors,isSubmitting,isSubmitSuccessful}} = useForm<NewProductData>()\n    // const { update } = useFieldArray({name : 'array'});\n\n    // Setting the values to the input tags.\n\n    /*\n      Dynamically setting the values to the input field.\n\n      setValue --> This function allows you to dynamically set the value \n      of a registered field and have the options to validate and update \n      the form state. At the same time, it tries to avoid unnecessary rerender.\n    */\n    setValue('productName',product.productName)\n    setValue('price',product.price)\n    setValue('starRating',product.starRating)\n    setValue('productId',product.productId)\n    setValue('productAvailable',product.productAvailable)\n    setValue('imageUrl',product.imageUrl)\n    setValue('productCode',product.productCode)\n\n    const fieldStyle = 'flex flex-col mb-2'\n    function getEditorStyle(fieldError: FieldError | undefined) {\n        return fieldError ? 'border-red-500' : ''\n    }\n\n    return (\n        <form noValidate className=\"border-b py-5\" onSubmit={handleSubmit(onSave)}>\n            <div className={fieldStyle}>\n                <label htmlFor=\"productName\">ProductName</label>\n\n                {/* \n                   Spreading the products + validation is done through using register\n                   Binds the value of textBox + add Validation as well.\n                */}\n                <input id=\"productName\" {...register('productName', {\n                    required:'You must enter a productName'\n                })} className={getEditorStyle(errors.productName)} />\n\n                <ValidationError fieldError={errors.productName}/>\n            </div>\n\n            <div className={fieldStyle}>\n                <label htmlFor=\"price\">ProductPrice</label>\n                <input id=\"price\" {...register('price', {\n                    required:'You must enter a price'\n                })} className={getEditorStyle(errors.price)} />\n\n                <ValidationError fieldError={errors.price}/>\n            </div>\n\n            <div className={fieldStyle}>\n                <label htmlFor=\"starRating\">Rating</label>\n                <input id=\"starRating\" {...register('starRating', {\n                    required:'You must enter a rating'\n                })} className={getEditorStyle(errors.starRating)} />\n\n                <ValidationError fieldError={errors.starRating}/>\n            </div>\n\n            <div className={fieldStyle}>\n                <button \n                    type=\"submit\" \n                    disabled={isSubmitting} \n                    className=\"mt-2 h-10 px-6 font-semibold bg-black text-white\"\n                    >\n                    Update\n                </button>\n            </div>\n        </form>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}